#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <stack>
#include <stdlib.h>
#include <cstring>
#include <string.h>
#include <iomanip>
#include <algorithm>

using namespace std;

typedef struct VN
{
	string symbol;
	vector<string> p;//该非终结符的产生式
	vector<string> first;//该非终结符的FIRST集
	vector<string> follow;//该非终结符的FOLLOW集
}N;//非终结符
typedef  struct VT
{
	string vt;
}T;//终结符, num 用 n 代替

vector<N> vn;//定义非终结符集合
vector<T> vt;//定义终结符集合
vector<N> vn1;//带有语义动作
vector< vector<string> > tab;//分析表

void getN(vector<N> *n)//获取非终结符
{
    string c[]={"A","F","G","E","I","J","H","M","N","O","P","U","V","Q","W","R","S","T","B","L","C","Y","D","Z","F1","NU","NUU"};
    for(int i=0;i<27;i++)
    {
       N temp;
       temp.symbol=c[i];
       n->push_back(temp);
    }


}
void getT(vector<T> *t)//获取终结符
{
    string c[]={"int","main","float","char","void","&&","||","!","+","-","*","/","(",")","[","]","{","}","'","=","<",">",">>","<<","==","<=",">=","s","id","num","ch","if","else","while","return","cout","cin",";",","};
    for(int i=0;i<39;i++)
    {
        T temp;
        temp.vt=c[i];
        t->push_back(temp);
    }
}
void getpRules(vector<N> *n)//获取产生式
{
    int k = 0;
    string rule[]={"A%F?Z?#",
                   "Z%id?(?G?)?{?H?}?#",
                   "Z%main?(?G?)?{?H?}?#",
                   "F%int?#",
                   "F%float?#",
                   "F%char?#",
                   "F%void?#",
                   "G%I?E?#",
                   "G%$?#",
                   "E%,?I?E?#",
                   "E%$?#",
                   "I%F1?id?NU?J?#",
                   "I%id?J?#",
                   "F1%int?#",
                   "F1%float?#",
                   "F1%char?#",
                   "NU%[?num?]?#",
                   "NU%$?#",
                   "J%=?B?#",
                   "J%$?#",
                   "H%M?N?#",
                   "M%G?;?M?#",
                   "M%N?#",
                   "N%O?N?#",
                   "N%P?N?#",
                   "N%Q?N?#",
                   "N%R?N?#",
                   "N%S?N?#",
                   "N%T?N?#",
                   "N%$?#",
                   "O%id?=?B?;?#",
                   "P%while?(?U?)?{?H?}?#",
                   "U%V2?V1?#",
                   "U%B?V?#",
                   "V1%&&?V2?V1?#",
                   "V1%||?V2?V1?#",
                   "V2%(?B?V?)?#",
                   "V2%!?(?B?V?)?#",
                   "V%<?B?#",
                   "V%>?B?#",
                   "V%==?B?#",
                   "V%<=?B?#",
                   "V%>=?B?#",
                   "Q%if?(?U?)?{?H?}?W?#",
                   "W%else?{?H?}?#",
                   "W%$?#",
                   "R%return?B?;?#",
                   "S%cout?<<?B?#",
                   "T%cin?>>?id?;?#",
                   "B%C?L?#",
                   "B%ch?#",
                   "B%s?#",
                   "L%+?C?L?#",
                   "L%-?C?L?#",
                   "L%$?#",
                   "C%D?Y?#",
                   "Y%*?D?Y?#",
                   "Y%/?D?Y?#",
                   "Y%$?#",
                   "D%id?NUU?#",
                   "D%(?B?)?#",
                   "D%num?#",
                   "NUU%[?num?]?#",
                   "NUU%$?#"};
    for(int i=0;i<64;i++)
    {
        for(int j=0;j<(n->size());j++)
        {
            while(1)
                if(rule[i][k++]=='%')
                    break;
            string s(rule[i],0,k-1);
            k = 0;
            if(s==n->at(j).symbol)
            {
                n->at(j).p.push_back(rule[i]);
            }
        }
    }
}

void getpRules1(vector<N> *n)//获取产生式
{
    int k = 0;
    string rule[]={"A%F?Z?#",
                   "Z%id?do(fun)?(?G?)?{?H?}?#",
                   "Z%main?do(fun)?(?G?)?{?H?}?#",
                   "F%int?#",
                   "F%float?#",
                   "F%char?#",
                   "F%void?#",
                   "G%I?E?#",
                   "G%$?#",
                   "E%,?I?E?#",
                   "E%$?#",
                   "I%F1?id?do(push)?NU?J?#",
                   "I%id?do(push)?J?#",
                   "F1%int?#",
                   "F1%float?#",
                   "F1%char?#",
                   "NU%[?num?]?#",
                   "NU%$?#",
                   "J%=?B?do(=)?#",
                   "J%$?#",
                   "H%M?N?#",
                   "M%G?;?M?#",
                   "M%N?#",
                   "N%O?N?#",
                   "N%P?N?#",
                   "N%Q?N?#",
                   "N%R?N?#",
                   "N%S?N?#",
                   "N%T?N?#",
                   "N%$?#",
                   "O%id?do(push)?=?B?do(=)?;?#",
                   "P%while?do(while)?(?U?)?do(do){?H?}?do(we)?#",
                   "U%V2?V1?#",
                   "U%B?V?#",
                   "V1%&&?V2?do(&&)?V1?#",
                   "V1%||?V2?do(||)?V1?#",
                   "V2%(?B?V?)?#",
                   "V2%!?(?B?V?)?do(!)?#",
                   "V%<?B?do(<)?#",
                   "V%>?B?do(>)?#",
                   "V%==?B?do(==)?#",
                   "V%<=?B?do(<=)?#",
                   "V%>=?B?do(>=)?#",
                   "Q%if?(?U?)?do(if)?{?H?}?W?do(ie)?#",
                   "W%else?do(el)?{?H?}?#",
                   "W%$?#",
                   "R%return?B?do(ret)?;?#",
                   "S%cout?<<?B?do(cout)?#",
                   "T%cin?>>?id?;?do(cin)?#",
                   "B%C?L?#",
                   "B%ch?do(push)?#",
                   "B%s?do(push)?#",
                   "L%+?C?do(+)?L?#",
                   "L%-?C?do(-)?L?#",
                   "L%$?#",
                   "C%D?Y?#",
                   "Y%*?D?do(*)?Y?#",
                   "Y%/?D?do(/)?Y?#",
                   "Y%$?#",
                   "D%id?do(push)?NUU?#",
                   "D%(?B?)?#",
                   "D%num?do(push)?#",
                   "NUU%[?num?do(arr)?]?#",
                   "NUU%$?#"};
    for(int i=0;i<64;i++)
    {
        for(int j=0;j<(n->size());j++)
        {
            while(1)
                if(rule[i][k++]=='%')
                    break;
            string s(rule[i],0,k-1);
            k = 0;
            if(s==n->at(j).symbol)
            {
                n->at(j).p.push_back(rule[i]);
            }
        }
    }
}

bool isVN(string s , vector<N> n)//判断字符是否为非终结符
{
	int judge = 0 , count = 0;
	if (n.size() > 0)
	{
		for (int i = 0; i < n.size(); i++)
		{
			count = i;
			if (s == n.at(i).symbol)
			{
				judge = 1;
				return true;
			}
		}
		if ((count == (n.size() - 1)) && (judge == 0))
		{
			return false;
		}
	}
	else
		return false;
}
bool isVT(string s , vector<T> t)//判断符号(除了num)是否为终结符,
{
	int judge = 0, count = 0;
	if (t.size() > 0 )
	{
		for (size_t i = 0; i < t.size(); i++)
		{
			count = i;
			if (s==t.at(i).vt)
			{
				judge = 1;
				return true;
			}
		}
		if (count == (t.size() - 1) && (judge == 0))
		{
			return false;
		}
	}
	else
		return false;
}
bool isEmptyIn(N n)//判断非终结符FIRST集是否含有空元素，有空元素(true);没空元素(false)
{
	int jugde = 0, i = 0;
	for (i = 0; i < n.first.size(); i++)
	{
		if (n.first.at(i) == "$")
		{
			jugde = 1;
			return true;
		}
	}
	if ((i == (n.first.size()) - 1) && (jugde == 0))
	{
		return false;
	}
}
int getVnPos(string s, vector<N> n)
/*获取某个非终结符在非终结符集合中的位置,
 若当前符号不在非终结符集合返回-1*/
{
	if (isVN(s, n) == true)//判断当前符号是否在非终结符集合
	{
		for (size_t i = 0; i < n.size(); i++)
		{
			if (s == n.at(i).symbol)
			{
				return i;
			}
		}
	}
	else
		return -1;
}

int getVtPos(string c, vector<T> t)
//获取某个终结符在终结符集合中的位置
{
	if (isVT(c , t) == true)//判断当前符号是否在终结符集合
	{
		for (int i = 0; i < t.size(); i++)
		{
			if (c == t.at(i).vt)
			{
				return i;
			}
		}
	}
	else
		return -1;
}
bool isExist(string c, N n, int i)
/*判断新求得的元素 是否和之前FIRST(1)/FOLLOW(2)集重复
	若重复返回true，不重复返回false
*/
{
	switch (i)
	{
	case 1://验证FIRST集
		if (n.first.size() == 0)
		{
			return false;
		}
		else
		{
			int judge = 0, count = 0;
			for (int i = 0; i < n.first.size(); i++)
			{
				count = i;
				if (n.first.at(i) == c)
				{
					judge = 1;
					return true;
				}
			}
			if ((judge == 0) && (count == (n.first.size() - 1)))
			{
				return false;
			}
		}
		break;
	case 2://验证FOLLOW集
		if (n.follow.size() == 0)
		{
			return false;
		}
		else
		{
			int judge = 0, count = 0;
			for (int i = 0; i < n.follow.size(); i++)
			{
				count = i;
				if (n.follow.at(i) == c)
				{
					judge = 1;
					return true;
				}
			}
			if ((judge == 0) && (count == (n.follow.size() - 1)))
			{
				return false;
			}
		}
		break;
	}
}
string getrulefirst(string t)//求产生式推出第一个字符
{
    int i=0;
    int j=0;
    while(1)
    {
        if(t.at(j)=='%')
            i = j;
        if(t.at(j)=='?')
            break;
        j++;

    }
    string s(t,i+1,j-i-1);
    return s;
}

int getSizerule(string s)//求产生式%后有几个字符
{
    int count=0,i=0;
    while(s.at(i)!='#')
    {
        if(s.at(i)=='?')
            count++;
        i++;
    }
    return count;
}
string getV(int n,string s)
{
    int k = 0;
    while(1)
        if(s[k++]=='%')
            break;
    if(n==0)
    {
        string x(s,0,k-1);
        return x;
    }
    if(n==1)
        return getrulefirst(s);
    else{
     int count1=0,count2=0;
    int i=0,j=0;
    while(s.at(i)!='#')
    {
        if(s.at(i)=='?')
            count1++;
        if(count1==n-1)
            break;
        i++;
    }

    while(s.at(j)!='#')
    {
        if(s.at(j)=='?')
            count2++;
        if(count2==n)
            break;
        j++;
    }
    string a(s,i+1,j-i-1);
    return a;
    }
}
void getFirst(vector<N> *n)//求每个非终结符的FIRST集
{
	int new_ = 0;//为1时重复求FIRST集，为0时结束循环
	unsigned int loc_vn = 0, loc_p = 0;//for循环中的计数器
	int count = 0;
	do//求FIRST集
	{
		for (loc_vn= 0; loc_vn < n->size(); loc_vn++)
			//对于位置在loc_vn的非终结符，根据其产生式求FIRST集
		{cout << ":: " << n->at(loc_vn).symbol << endl;
			vector<string> temp = n->at(loc_vn).p;//该非终结符的产生式集合
			if ((temp.size()) > 0)
				//产生式的数目大于0
			{
				//分析每个产生式的情况
				for (loc_p = 0; loc_p < (temp.size()); loc_p++)
					//分析第i个产生式
				{cout << "p:: " << temp[loc_p] << endl;
					string c_loc3 =getrulefirst(temp.at(loc_p)) ;//中间变量，每个产生式位置3处的字符
					if (isVN(c_loc3, vn) == true)
						//该非终结符的第i个产生式推出的第一个符号，例如E->E+F中的E  是非终结符
					{
						int n_loc3 = getVnPos(c_loc3, vn);
						cout << "xxxx " << n_loc3 << endl;
						if (n->at(n_loc3).first.size() == 0)
						{
							count++;
							cout << "n_loc3 " << n_loc3 << endl;
						}
						else
						{
							vector<string> n3_first = n->at(n_loc3).first;//中间变量，产生式中非终结符的FIRST集
							for (int i = 0; i < n3_first.size(); i++)
							{
								if (isExist(n3_first.at(i), n->at(loc_vn), 1) == false)
								{
									n->at(loc_vn).first.push_back(n3_first.at(i));
								}
							}
						}
					}
					if (isVT(c_loc3, vt) == true || (c_loc3 == "$"))
						//该非终结符的第i个产生式推出的第一个符 号，例如E->*F中的*     是终结符
					{
						if (isExist(c_loc3, n->at(loc_vn) , 1) == false)
						{
							n->at(loc_vn).first.push_back(c_loc3);
							if(n->at(loc_vn).symbol == "NUU") cout << "F1 <- " << c_loc3 << endl;
						}
					}
				}
			}
		}
		//确定是否循环求FIRST集
		if (count > 0)
		{
			new_ = 1;
		}
		else
		{
			new_ = 0;
		}
		count = 0;
		cout << new_ << endl;
	} while (new_ == 1);//循环求每个非终结符的FIRST集，直到每个集合不再添加新的元素结束循环
}
void getFollow(vector<N> *n)//获取非终结符的FOLLOW集
{
	int count = 40,flag = 0;
	unsigned int loc_vn = 0, loc_p = 0, loc_c = 0;//for循环中的计数器
	do
	{
		//按非终结符的顺序 遍历所有的产生式
		for (loc_vn = 0; loc_vn < n->size(); loc_vn++)
			//对于位置在loc_vn的非终结符，根据其产生式求FIRST集
		{
			if (isExist("#", n->at(0) , 2) == false)
			{
				n->at(0).follow.push_back("#");//起始符的FOLLOW集加入'#'符号
			}
			vector<string> temp = n->at(loc_vn).p;//该非终结符的产生式 集合
			if ((temp.size()) > 0)
			//产生式的数目大于0
			{
				//分析每个产生式的情况
				for (loc_p = 0; loc_p < (temp.size()); loc_p++)
				//分析第loc_p个产生式
				{
					for (loc_c = 1; loc_c <=getSizerule(temp.at(loc_p)); loc_c++)
					//分析该产生式的第loc_c个字符,从loc_c = 3的位置开始,对出现的所有非终结符求FOLLOW集
					{
						string tempc = getV(loc_c,temp.at(loc_p));//临时变量，保存当前要分析的 字符
						if ((isVN(tempc , vn) == true))//该字符为 非终结符，求该字符的FOLLOW集
					    //该字符为 非终结符 且后续至少有一个字符，读取下一个字符，判断是否为空
						{
							int pos_tempc = getVnPos(tempc, vn);//求该字符的FOLLOW集
							unsigned int loc_tempc;//FOLLOW集中的字符
							for (loc_tempc = loc_c; loc_tempc <=getSizerule(temp.at(loc_p)); loc_tempc++)
							{
								flag = 0;
								if (loc_tempc == getSizerule(temp.at(loc_p)))//产生式的最后一个符号是非终结符
								{
									int pos1 = getVnPos(getV(0,temp.at(loc_p)), vn);//
									if ((n->at(pos1).follow.size() == 0))
									{
										//count++;
									}
									else
									{
										vector<string> pos1_follow = n->at(pos1).follow;//产生式中非终结符(第一个字符)的FOLLOW集
										for (size_t i = 0; i < pos1_follow.size(); i++)
										{
											if (isExist(pos1_follow.at(i), n->at(pos_tempc), 2) == false)
												//FOLLOW集没有该元素
											{
												n->at(pos_tempc).follow.push_back(pos1_follow.at(i));
											}
										}
									}
								}
								else
								//当前分析的字符不是产生式的倒数第一个字符
								{
									string c = getV(loc_tempc + 1,temp.at(loc_p));
									if (c == "$"||c == "#")
										//非终结符后的第一个字符为空
										continue;
									else
										//非终结符后的第一个字符不为空
									{
										if (isVT(c , vt) == true)
											//是非空的终结符
										{
											if (isExist(c, n->at(pos_tempc), 2) == false)
											{
												n->at(pos_tempc).follow.push_back(c);
											}
											break;
										}
										if (isVN(c , vn) == true)
											//是非终结符
										{
											//遍历该非终结符的FIRST集
											int i = getVnPos(c, vn);
											for (size_t j = 0; j < n->at(i).first.size(); j++)
											{
												if (n->at(i).first.at(j) == "$")
													//FIRST集含中的空的元素
												{
													flag = 1;
												}
												else
													//非空元素
												{
													if (isExist(n->at(i).first.at(j), n->at(pos_tempc), 2) == false)
													{
														n->at(pos_tempc).follow.push_back(n->at(i).first.at(j));
													}
							 					}
											}
										}
									}
								}
								if(!flag) break;
							}
						}
					}
				}
			}
		}
		count --;
	} while (count > 0);
}

void analysisTab()//建立带有同步信息的预测分析表
{
	//初始化分析表的行数、列数
	tab.resize(vn.size());//行数,非终结符的个数
	for (size_t i = 0; i < vn.size(); i++)
	{
		tab[i].resize((vt.size() + 1));
	}//列数，终结符的个数+1(#)
	for (size_t i = 0; i < vn.size(); i++)//遍历每个非终结符
	{
		vector<string> tempFollow = vn[i].follow;//推导出该产生式的非终结符的FOLLOW集
		for (size_t j = 0; j < vn[i].p.size(); j++)//每个非终结符开头的产生式
		{
			string tempc = getV(1,vn[i].p[j]);
			if (isVT(tempc , vt) == true)
			//终结符
			{
				int posT = getVtPos(tempc , vt);//终结符
				tab[i][posT] = vn1[i].p[j];
                if(vn[i].symbol=="NUU") cout << vn1[i].p[j] << " qqqq" << tempc << " ffff" << vn.at(i).symbol << " " << vt.at(posT).vt << endl;

			}
			if (tempc == "$")
			{
				for (size_t k = 0; k < tempFollow.size(); k++)
				{
					//vn[i].follow
					if (tempFollow.at(k) != "#")
					{
						int posFollow = getVtPos(tempFollow.at(k), vt);
						if(tab[i][posFollow].empty()) tab[i][posFollow] = vn1[i].p[j];
                        if(vn[i].symbol=="NUU") cout << vn[i].p[j] << " zzzz" << tempc << " ffff" << vn.at(i).symbol << " " << vt.at(posFollow).vt << endl;

					}
					else
						//FOLLOW集中有#
					{
						tab[i][vt.size()] = vn1[i].p[j];
					}
				}
			}

			if (isVN(tempc, vn) == true)
			//非终结符
			{
				int posN = getVnPos(tempc , vn);//非终结符
				vector<string> tempFirst = vn.at(posN).first;
				for (size_t f = 0; f < tempFirst.size(); f++)
				{
					if (tempFirst.at(f) != "$")
					{
						int posFirst = getVtPos(tempFirst.at(f), vt);//获取该元素的位置
						tab[i][posFirst] = vn1[i].p[j];
						if(vn[i].symbol=="NUU") cout << vn[i].p[j] << " ffff" << tempc << " ffff" << vn.at(i).symbol << " " << vt.at(posFirst).vt << endl;
					}
				}
				if (isEmptyIn(vn.at(posN)) == true)
				//非终结符的FIRST集含空元素
				{
					if (getSizerule(vn[i].p[j])>1)
					{
						int judge = 0;//产生式若能退出空，为0

						//分析产生式的后续字符
						unsigned l;
						for (l = 2; l <=getSizerule(vn[i].p[j]); l++)
						{
							if (isVT(getV(l,vn[i].p[j]), vt) == true)
							//空 后面跟了非空终结符,只处理这一个字符即可
							{
								int posT = getVtPos(getV(l,vn[i].p[j]), vt);
								tab[i][posT] = vn1[i].p[j];
                                if(vn[i].symbol=="NUU") cout << vn[i].p[j] << " ffff" << tempc << " dddd" << vn.at(i).symbol << " " << vt.at(posT).vt << endl;

								judge = 1;
								break;
							}
							if (isVN(getV(l,vn[i].p[j]), vn) == true)
							//空 后面跟了非终结符
							{
								int m = getVnPos(getV(l,vn[i].p[j]), vn);	//获取该非终结符位置
								for (size_t f = 0; f < vn[m].first.size(); f++)
								{
									if (vn[m].first.at(f) != "$")
									{
										int posFirst = getVtPos(vn[m].first.at(f), vt);//获取该元素在FIRST集的位置
										tab[i][posFirst] = vn1[i].p[j];
                                        if(vn[i].symbol=="NUU") cout << vn[i].p[j] << " dddd" << tempc << " ffff" << vn.at(i).symbol << " " << vt.at(posFirst).vt << endl;

									}
								}
								if (isEmptyIn(vn[m]) == true)//非终结符的FIRST集含空元素
								{
									continue;
								}
								else
								{
									judge = 1;
									break;
								}
							}
						}
						if ((l == getSizerule(vn[i].p[j])) && (judge == 0))//产生式能退出空
						{
							//vn[i].follow
							for (size_t k = 0; k < tempFollow.size(); k++)
							{
								if (tempFollow.at(k) != "#")
								{
									int posFollow = getVtPos(tempFollow.at(k), vt);
									tab[i][posFollow] = vn1[i].p[j];
                                    if(vn[i].symbol=="NUU") cout << vn[i].p[j] << " dddd" << tempc << " dddd" << vn.at(i).symbol << " " << vt.at(posFollow).vt << endl;

								}
								else
								//FOLLOW集中有#
								{
									tab[i][vt.size()] = vn1[i].p[j];
								}
							}
						}
					}
					else
					//该产生式的非终结符可以推出空元素,看FOLLOW集
					{
						for (size_t k = 0; k < tempFollow.size(); k++)
						{
							//vn[i].follow
							if (tempFollow.at(k) != "#")
							{
								int posFollow = getVtPos(tempFollow.at(k), vt);
								tab[i][posFollow] = vn1[i].p[j];
                                if(vn[i].symbol=="W") cout << vn[i].p[j] << " dddd" << tempc << " wwww" << vn.at(i).symbol << " " << vt.at(posFollow).vt << endl;

							}
							else
							//FOLLOW集中有#
							{
								tab[i][vt.size()] = vn1[i].p[j];
							}
						}
					}
				}
			}
		}
	}

}

bool doyuyi(string x)
{
    int flag = 1;
    if(x=="do(push)") flag = 0;
    if(x=="do(+)") flag =0;
    if(x=="do(-)") flag =0;
    if(x=="do(*)") flag =0;
    if(x=="do(/)") flag =0;
    if(x=="do(=)") flag =0;
    if(x=="do(<)") flag =0;
    if(x=="do(>)") flag =0;
    if(x=="do(==)") flag =0;
    if(x=="do(<=)") flag =0;
    if(x=="do(>=)") flag =0;
    if(x=="do(&&)") flag =0;
    if(x=="do(||)") flag =0;
    if(x=="do(while)") flag =0;
    if(x=="do(if)") flag =0;
    if(x=="do(el)") flag =0;
    if(x=="do(ie)") flag =0;
    if(x=="do(we)") flag =0;
    if(x=="do(cin)") flag =0;
    if(x=="do(cout)") flag =0;
    if(x=="do(do)") flag =0;
    if(x=="do(fun)") flag =0;
    return flag;
}

string re(plotnode *p)
{
    if(p->name == "IT")
        return IT[p->num];
    else if(p->name == "CT")
        return CT[p->num];
    else if(p->name == "CCT")
        return CCT[p->num];
    else if(p->name == "ST")
        return ST[p->num];
    else if(p->name == "KT")
        return KT[p->num];
    else return PT[p->num];
}

string rre(plotnode *p)
{
    if(p->name == "IT")
        return "id";
    else if(p->name == "CT")
        return "ch";
    else if(p->name == "CCT")
        return "num";
    else if(p->name == "ST")
        return "s";
    else if(p->name == "KT")
        return KT[p->num];
    else return PT[p->num];
}

bool xxw(string x,string ww)
{
    int flag = 1;
    if(x == "id")
        if (std::find(IT.begin(), IT.end(), ww) != IT.end())
            flag = 0;
    if(x == "num")
        if (std::find(CCT.begin(), CCT.end(), ww) != CCT.end())
            flag = 0;
    if(x == "ch")
        if (std::find(CT.begin(), CT.end(), ww) != CT.end())
            flag = 0;
    if(x == "s")
        if (std::find(ST.begin(), ST.end(), ww) != ST.end())
            flag = 0;
    if(x == ww)
        flag = 0;
    return flag;
}

bool yufa(plotnode *p)
{
    string xx,str;
    vector <string> syn(1,"#");
    syn.push_back("A");
    xx = syn.back();
    syn.pop_back();
    string c;
    w = re(p);
    take_action(w);
    for(int i=0;;i++)
    {
        cout << xx << " " << w << endl;
        cout << xx << " " << w << endl;
        if(doyuyi(xx))
        if(xxw(xx,w))
            if(isVN(xx,vn))
            {
                str = tab[getVnPos(xx,vn)][getVtPos(rre(p),vt)];
                for(int j=str.size()-1;;j--)
                    if(str[j] != '?'&&str[j] != '#'&&str[j] != '%'&&str[j] != '$')
                    {
                        cout << "666 " << str << endl;
                        cout << str[j] << endl;
                        c = str[j] + c;
                        if(j==0) break;
                    }
                    else if(str[j] == '?'&&c.size()>0)
                    {
                        cout << "in& " << c << endl;
                        syn.push_back(c);
                        c.clear();
                    }
                    else if(str[j] == '%'&&c.size()>0)
                    {
                        cout << "in% " << c << endl;
                        syn.push_back(c);
                        c.clear();
                        break;
                    }
                    else if(str[j] == '$')
                        break;
                for(int j=0;j<syn.size();j++)
                    cout << syn[j] << endl;
            }
            else return false;
        else p=p->next;
        take_action(syn.back());
        xx = syn.back();
        syn.pop_back();
        if(p != NULL)
            w = re(p);
        else w = "#";
        if(xx == "#"&&w == "#") return true;

    }
}

int main()
{
    initPFINFL();
    initFPMtable();
    initsymt();
    initTVAL();
    Origin_TVAL();
    initAINFL();
    vall_all.resize(0);
    searcht.resize(0);
    getN(&vn);cout << __LINE__ << endl;
    getT(&vt);cout << __LINE__ << endl;
    getpRules(&vn);cout << __LINE__ << endl;
    getN(&vn1);
    getpRules1(&vn1);
    getFirst(&vn);cout << __LINE__ << endl;
    getFollow(&vn);cout << __LINE__ << endl;
 /*   vn.at(14).follow.push_back("int");
    vn.at(14).follow.push_back("void");
    vn.at(14).follow.push_back("char");
    vn.at(14).follow.push_back("float");*/
 //   tab[12][2] = "N%O&N&#";
    analysisTab();

    ifstream infile;
    string str;
    infile.open("test.txt");
    stringstream buffer;
    buffer << infile.rdbuf();
    str = buffer.str();
    cout << str << endl;

    str = str + "\n#";
    string token="";
    int state = 1;
    int state_before;
    int i = 0,j = 0;
    char ch;
    plotnode *p;
    scan s;
    s.tL.inilist("tL",0);
    s.tA.inilist("tA",0);
    while((ch = str[i]) != '#')
    {
        state_before = state;
        state = s.state_change(state,ch);
        if(state != 1)
            if(state)
                {token = token + ch;i++;}
            else
            {
                s.state_token(state_before,token);
                state = 1;
                token.clear();
            }
        else i++;
        if(ch == '\n'&&j++%2==0)
        {
            p = s.tL.head;
            if(p->next != NULL)
            {cout << "aoligei" << endl;
                for(int k=0;p!=NULL;p=p->next)
                    cout << "<" << p->name << " " << p->num << ">";
                fill_symbol_all(s.tL);cout << "aoligei" << endl;
            }cout << endl;
            s.tL.clr();
            s.tL.inilist("tL",0);
        }
    }
    if(vall_all.size() == 0)
        vall_all.push_back(*searcht[find_searcht("main")].vallt);
    p = s.tA.head->next;



    for(int i=0;p!=NULL;p=p->next)
    {
        cout << "<" << p->name << " " << p->num << ">";
    }
    cout << endl;

    for(int i=0;i<vn.size();i++)
    {
        for(int j=0;j<vn.at(i).p.size();j++)
        {
            cout<<vn.at(i).p.at(j)<<endl;
        }
    }
    int  a=getVnPos("S",vn);
    int b=getVtPos("void",vt);
    cout<<a<<"   "<<b<<endl;
    string ss=getrulefirst(vn.at(5).p.at(0));
    cout<<ss<<endl;
    for(int i=0;i<vn.size();i++)
    {
        cout<<vn.at(i).symbol<<" :";
        for(int j=0;j<vn.at(i).first.size();j++)
        {
            cout<<vn.at(i).first.at(j)<<"  ";
        }
        cout<<endl;
    }
    int c=getSizerule(vn.at(14).p.at(1));
    cout<<c<<endl;
    string d=getV(2,vn.at(3).p.at(1));
    cout<<d<<endl;
    for(int i=0;i<vn.size();i++)
    {
        cout<<vn.at(i).symbol<<" :";
        for(int j=0;j<vn.at(i).follow.size();j++)
        {
            cout<<vn.at(i).follow.at(j)<<"  ";
        }
        cout<<endl;
    }
    cout<<getV(1,vn.at(5).p.at(1));
    cout << endl;
    for(int i=0;i<vn.size();i++)
    {
        cout << vn.at(i).symbol << " ";
    }
    cout << endl;
    for(int i=0;i<vt.size();i++)
    {
        cout << vt.at(i).vt << " ";
    }
    cout << endl;
    for(int i=0;i<vn.size();i++)
    {
        for(int j=0;j<vt.size()+1;j++)
            cout << right << setw(20) << tab.at(i).at(j) << " ";
        cout << endl;
    }cout << "666";
    p = s.tA.head->next;
    if(yufa(p)) cout << "true" << endl;
    else cout << "false" << endl;
    show_symbol();printvall_all();
    show_all_QT();
    cout<<endl;
    return 0;
}
